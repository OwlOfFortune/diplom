#ifndef DIPLOMA_MKA_INFO_H
#define DIPLOMA_MKA_INFO_H

#include "peer_list_str.h"
#include "mka_key_str.h"

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с основной информацией по соединению, ключам и текущему узлу */
/* ----------------------------------------------------------------------------------------------- */
typedef struct mka_info{
    peer_list_str peer_l;       /// Структура с узлами сети
    mka_key_str mkaKeyStr;      /// Структура с ключевой информацией
    int isKS;                   /// Флаг, свидетельствующий о том является ли узел КС (ключевым сервером)
    int KS_priority;            /// Приоритет узла для станвления КС (если приоритеты равны, выбирается узел с наибльшим id)
    int my_KS_priority;         /// Приоритет текущего узла
    int id;                     /// Номер текущего узла
    int msg_num;                /// Номер приветственного сообщения
}mka_info;

/* ----------------------------------------------------------------------------------------------- */
/*! Инициализация структуры

    @param mka_i        - структура с основной информацией
    @param id           - номер текущего узла
    @param KS_priority  - приоритет КС
    @param list_timeout - время жизни узлов

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_info_init(mka_info *mka_i, int id, int KS_priority, int list_timeout);

/* ----------------------------------------------------------------------------------------------- */
/*! Очистка структуры

    @param mka_i - структура с основной информацией

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_info_destruct(mka_info *mka_i);

#endif //DIPLOMA_MKA_INFO_H
