#ifndef DIPLOMA_MKA_KEY_STR_H
#define DIPLOMA_MKA_KEY_STR_H

#ifndef CAK_LEN
// 128 or 256 bit -> 16 & 32 Byte
#define CAK_LEN 16
#endif

#ifndef CKN_LEN
// 128 or 256 bit -> 16 & 32 Byte
#define CKN_LEN 16
#endif

#ifndef SAK_LEN
// 128 or 256 bit -> 16 & 32 Byte
#define SAK_LEN 16
#endif

#ifndef ICK_LEN
// 128 or 256 bit -> 16 & 32 Byte
#define ICK_LEN 16
#endif

#ifndef ICV_LEN
#define ICV_LEN 16
#endif

#ifndef PSK_LEN
// 128 or 256 bit -> 16 & 32 Byte
#define PSK_LEN CAK_LEN
#endif

#ifndef KEK_LEN
// 128 or 256 bit -> 16 & 32 Byte
#define KEK_LEN 16
#endif

#ifndef KN_LEN
#define KN_LEN 4
#endif

#ifndef KI_LEN
#define KI_LEN 16
#endif

#include "libakrypt.h"
#include "peer_list_str.h"


/* ----------------------------------------------------------------------------------------------- */
/*! Структура с ключевыми данными */
/* ----------------------------------------------------------------------------------------------- */
// todo: implement cak
typedef struct mka_key_str{
    struct bckey *CAK;          /// Массив ключей, использующихся для защиты соединения между соседними узлами
    int cak_capacity;           /// Длина массива CAK
    struct bckey PSK;           /// Предварительно распределенный ключ, требуется для аутентификации
    struct bckey KEK;           /// Ключ для безопасной передачи SAK
    struct bckey SAK;           /// Ключ, являющийся результатом работы программы
}mka_key_str;

/* ----------------------------------------------------------------------------------------------- */
/*! Инициализация структуры ключей

    @param mka_k_s - структура с ключевой информацией

    @return 0 - успех, иначе возвращается код ошибки
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_init(mka_key_str *mka_k_s);

/* ----------------------------------------------------------------------------------------------- */
/*! Установка предварительно распределенного ключа в структуру

    @param mka_k_s  - структура с ключевой информацией
    @param PSK      - указатель на предварительно распределенный ключ
    @param psk_len  - длина PSK

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_set_PSK(mka_key_str *mka_str, unsigned char *PSK, int psk_len);

/* ----------------------------------------------------------------------------------------------- */
/*! Установка ключа для шифрования SAK в структуру

    @param mka_k_s  - структура с ключевой информацией
    @param KEK      - указатель на ключ для шифрования SAK
    @param kek_len  - длина KEK

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_set_KEK(mka_key_str *mka_str, unsigned char *KEK, int kek_len);

/* ----------------------------------------------------------------------------------------------- */
/*! Выработка ключа KEK

    @param mka_k_s - структура с ключевой информацией

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_gen_KEK(mka_key_str *mka_ks_str);

/* ----------------------------------------------------------------------------------------------- */
/*! Выработка ключа SAK

    @param mka_k_s  - структура с ключевой информацией
    @param list     - структура с данными об узлах

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_gen_SAK(mka_key_str *mka_ks_str, peer_list_str *list);

/* ----------------------------------------------------------------------------------------------- */
/*! Установка SAK в структуру

    @param mka_k_s  - структура с ключевой информацией
    @param SAK      - указатель на ключ SAK
    @param size     - длина SAK

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_set_SAK(mka_key_str *mka_ks_str, ak_uint8 *SAK, int size);

/* ----------------------------------------------------------------------------------------------- */
/*! Выработка ключа CAK для передачи данны соседним узлам

    @param mka_k_s          - структура с ключевой информацией
    @param id_c             - номер узла отправителя
    @param id_s             - номер узла получателя
    @param interface_num    - номер интерфейса для получения номера массива CAK

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_gen_CAK(mka_key_str *mka_ks_str, int id_c, int id_s, int interface_num);

/* ----------------------------------------------------------------------------------------------- */
/*! Добавление ключа CAK в массив ключей CAK (инициализация)

    @param mka_k_s - структура с ключевой информацией

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_add_CAK(mka_key_str *mka_key_str);

/* ----------------------------------------------------------------------------------------------- */
/*! Удаление CAK из массива CAK

    @param mka_k_s  - структура с ключевой информацией
    @param pos      - порядковый номер ключа

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_rm_CAK(mka_key_str *mka_key_str, int pos);

/* ----------------------------------------------------------------------------------------------- */
/*!

    @param

    @return
*/
/* ----------------------------------------------------------------------------------------------- */
char *mka_key_str_func_blom(char *b, int b_len, int id_c, int id_s, int *len);

/* ----------------------------------------------------------------------------------------------- */
/*! Очистка структуры ключей

    @param mka_k_s - структура с ключевой информацией

    @return 0 - успех
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_destruct(mka_key_str *mka_ks_str);


#endif //DIPLOMA_MKA_KEY_STR_H
