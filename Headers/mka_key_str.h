#ifndef DIPLOMA_MKA_KEY_STR_H
#define DIPLOMA_MKA_KEY_STR_H

#include "libakrypt.h"
#include "peer_list_str.h"

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с данными CAK */
/* ----------------------------------------------------------------------------------------------- */
typedef struct peer_keys{
    struct bckey CAK;          /// Массив ключей, использующихся для защиты соединения между соседними узлами
    struct bckey KEK;          /// Ключ для безопасной передачи SAK
    int peer_id;               /// Идентификатор узла
}peer_keys;

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с ключевыми данными */
/* ----------------------------------------------------------------------------------------------- */
typedef struct mka_key_str{
    peer_keys *peer_keys_list;          /// Массив ключей, использующихся для защиты соединения между соседними узлами
    int peer_keys_list_capacity;        /// Длина массива CAK
    struct blomkey PSK;                 /// Предварительно распределенный ключ, требуется для аутентификации и выработки общего ключа CAK
    struct bckey SAK;                   /// Ключ, являющийся результатом работы программы
    int peer_keys_list_is_busy;         /// Флаг, показывающий, что список ключей занят
}mka_key_str;

/* ----------------------------------------------------------------------------------------------- */
/*! Инициализация структуры ключей

    @param bkey - ключ Блома, который будет заполняться
    @param fp   - дескриптор файла с ключем Блома

    @return 0 - успех, иначе возвращается код ошибки
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_blomkey_get_abonent_key_from_file(ak_blomkey bkey, FILE *fp);

/* ----------------------------------------------------------------------------------------------- */
/*! Инициализация структуры ключей

    @param mka_k_s - структура с ключевой информацией
    @param fp      - дескриптор файла с ключем Блома

    @return 0 - успех, иначе возвращается код ошибки
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_init(mka_key_str *mka_k_s, FILE *fp);

/* ----------------------------------------------------------------------------------------------- */
/*! Установка предварительно распределенного ключа в структуру

    @param mka_str - структура с ключевой информацией
    @param PSK      - указатель на предварительно распределенный ключ
    @param psk_len  - длина PSK

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_set_PSK(mka_key_str *mka_str, unsigned char *PSK, int psk_len);

/* ----------------------------------------------------------------------------------------------- */
/*! Установка ключа для шифрования SAK в структуру

    @param mka_str  - структура с ключевой информацией
    @param KEK          - указатель на ключ для шифрования SAK
    @param kek_len      - длина KEK
    @param peer_id      - идентификатор узла

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_set_KEK(mka_key_str *mka_str, unsigned char *KEK, int kek_len, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Выработка ключа KEK

    @param mka_key_str          - структура с ключевой информацией
    @param peer_id              - идентификатор узла

    @return 0 - успех, -1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_gen_KEK(mka_key_str *mka_ks_str, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Выработка ключа SAK

    @param mka_ks_s  - структура с ключевой информацией
    @param list      - структура с данными об узлах

    @return 0 - успех, -1 - ошибка

*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_gen_SAK(mka_key_str *mka_ks_str, peer_list_str *list);

/* ----------------------------------------------------------------------------------------------- */
/*! Установка SAK в структуру

    @param mka_ks_str_s  - структура с ключевой информацией
    @param SAK           - указатель на ключ SAK
    @param size          - длина SAK

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_set_SAK(mka_key_str *mka_ks_str, ak_uint8 *SAK, int size);

/* ----------------------------------------------------------------------------------------------- */
/*! Выработка ключа CAK для передачи данны соседним узлам

    @param mka_ks_str       - структура с ключевой информацией
    @param peer_id          - номер узла получателя

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_gen_CAK(mka_key_str *mka_ks_str, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Добавление ключа CAK в массив ключей CAK (инициализация)

    @param mka_key_str_s - структура с ключевой информацией

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_add_peer_keys(mka_key_str *mka_key_str);

/* ----------------------------------------------------------------------------------------------- */
/*! Удаление CAK из массива CAK

    @param mka_key_str_s  - структура с ключевой информацией
    @param peer_id        - порядковый номер ключа

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_rm_peer_keys_by_peer_id(mka_key_str *mka_key_str, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Очистка структуры ключей

    @param mka_k_s - структура с ключевой информацией

    @return 0 - успех
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_destruct(mka_key_str *mka_ks_str);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение порядкового номера ключа клиента по его идентификатору

    @param mka_ks_str - структура с ключевой информацией
    @param peer_id    - идентификатор узла

    @return num - успех, -1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_key_str_get_peer_key_num_by_peer_id(mka_key_str *mka_ks_str, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Установить номер абонента по порядковому номеру в массиве ключей

    @param mka_ks_str - структура с ключевой информацией
    @param peer_id    - идентификатор абонента
    @param pos        - номер в массиве ключей

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_set_peer_id(mka_key_str *mka_ks_str, int peer_id, int pos);

/* ----------------------------------------------------------------------------------------------- */
/*! Разблокирование массива с информацией об узлах

    @param mka_ks   - массив информации об ключах
    @param type     - тип блокировки (0 - на изменение, 1 - на чтение)

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_unfreeze(mka_key_str *mka_ks, int type);

/* ----------------------------------------------------------------------------------------------- */
/*! Блокировка массива с информацией об ключах

    @param mka_ks   - массив информации об ключах
    @param type     - тип блокировки (0 - на изменение, 1 - на чтение)
*/
/* ----------------------------------------------------------------------------------------------- */
void mka_key_str_freeze(mka_key_str *mka_ks, int type);

#endif //DIPLOMA_MKA_KEY_STR_H
