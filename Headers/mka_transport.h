#ifndef DIPLOMA_MKA_TRANSPORT_H
#define DIPLOMA_MKA_TRANSPORT_H

#include <malloc.h>
#include <time.h>
#include <math.h>
#include "transport.h"
#include "mka_info.h"
#include "mka_key_str.h"

/* ----------------------------------------------------------------------------------------------- */
/*! Структура незашифрованных заголовков */
/* ----------------------------------------------------------------------------------------------- */
// todo: may be if we could not decrypt then send to next peer?
typedef struct mka_tr_open_msg{
    int id_src;     /// Номер узла отправителя
    int id_rcv;     /// Номер узла получателя
    int encr;       /// Флаг, свидетельствующий о том, что сообщение зашифровано
    int type;       /// Тип соощения: 0 - helloTime; 1 - ks_msg; 2 - finish (not implemented)
} mka_tr_open_msg;

/* ----------------------------------------------------------------------------------------------- */
/*! Структура зашифрованных заголовков */
/* ----------------------------------------------------------------------------------------------- */
typedef struct mka_tr_encr_msg{
    int num_of_fragments;       /// Количесво фрагментов
    int fragment_id;            /// Номер фрагмента
    int KS_priority;            /// Приоритет КС узла отправителя
} mka_tr_encr_msg;

/* ----------------------------------------------------------------------------------------------- */
/*! Отправляет данные любой (не шифрует) длины с заголовками выше

    @param connectionParams - структура с данными о конкретном соединении
    @param mka_i            - структура с основной информацией
    @param data             - строка для отправки
    @param data_len         - длина data
    @param msg_type         - тип сообщения

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_tr_send_data(connection_params *connectionParams, mka_info *mka_i, char *data, int data_len, int msg_type);

/* ----------------------------------------------------------------------------------------------- */
/*! Отправляет данные любой (шифрует) длины с заголовками выше

    @param connectionParams     - структура с данными о конкретном соединении
    @param mka_i                - структура с основной информацией
    @param data                 - строка для отправки
    @param data_len             - длина data
    @param msg_type             - тип сообщения
*/
/* ----------------------------------------------------------------------------------------------- */
void mka_tr_send_encr_data(connection_params *connectionParams, mka_info *mka_i, ak_uint8 *data, int data_len, int msg_type);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение данных mka (не дефрагментированных, без заголовков)

    @param connectionParams - структура с данными о конкретном соединении
    @param eh               - указатель на изменяемую структуру ethernet заголовка
    @param mka_t            - указатель на изменяемую структуру шифруемого заголовка mka_tr_encr_msg
    @param mka_t_o          - указатель на изменяемую структуру не шифруемого заголовка mka_tr_open_msg
    @param data_len         - длина data

    @return указатель на полученные данные или null, если не получены
*/
/* ----------------------------------------------------------------------------------------------- */
char *mka_tr_recv_data(connection_params *connectionParams, struct ether_header *eh, mka_tr_encr_msg *mka_t, mka_tr_open_msg *mka_t_o, int *data_len);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение данных mka в течении timeout секунд (не дефрагментированных, без заголовков)

    @param connectionParams - структура с данными о конкретном соединении
    @param eh               - указатель на изменяемую структуру ethernet заголовка
    @param mka_t            - указатель на изменяемую структуру шифруемого заголовка mka_tr_encr_msg
    @param mka_t_o          - указатель на изменяемую структуру не шифруемого заголовка mka_tr_open_msg
    @param data_len         - длина data
    @param timeout          - время ожидания сообщения в сек

    @return указатель на полученные данные или null, если не получены
*/
/* ----------------------------------------------------------------------------------------------- */
char *mka_tr_recv_data_sec(connection_params *connectionParams, struct ether_header *eh, mka_tr_encr_msg *mka_t, mka_tr_open_msg *mka_t_o, int *data_len, int timeout);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение данных mka в течении timeout секунд (дефрагментированных, без заголовков)

    @param connectionParams - структура с данными о конкретном соединении
    @param mka_i            - структура с основной информацией
    @param eh               - указатель на изменяемую структуру ethernet заголовка
    @param mka_t            - указатель на изменяемую структуру шифруемого заголовка mka_tr_encr_msg
    @param mka_t_o          - указатель на изменяемую структуру не шифруемого заголовка mka_tr_open_msg
    @param data_len         - длина data

    @return указатель на полученные данные или null, если не получены
*/
/* ----------------------------------------------------------------------------------------------- */
char *mka_tr_recv_defragment_data(connection_params *connectionParams, mka_info *mka_i, struct ether_header *eh, mka_tr_encr_msg *mka_t, mka_tr_open_msg *mka_t_o, int *data_len);

/* ----------------------------------------------------------------------------------------------- */
/*! Вывод на экран распарс. сообщения

    @param data     - строка для печати
    @param data_len - длина data

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_tr_print_frame(char *data, int data_len);

/* ----------------------------------------------------------------------------------------------- */
/*! Вывод на экран распарс. сообщения (без ethernet заголовка)

    @param data     - строка для печати
    @param data_len - длина data

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_tr_print_frame_without_ether(char *data, int data_len);

#endif //DIPLOMA_MKA_TRANSPORT_H
