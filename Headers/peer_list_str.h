#ifndef DIPLOMA_PEER_LIST_STR_H
#define DIPLOMA_PEER_LIST_STR_H

#include <memory.h>
#include <stdlib.h>
#include <stdio.h>

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с полученными данными об узле */
/* ----------------------------------------------------------------------------------------------- */
typedef struct peer{
    int peer_id;        /// Номер узла в сети
    int KS_priority;    /// Приоритет КС узла
} peer;

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с данными об узле */
/* ----------------------------------------------------------------------------------------------- */
typedef struct peer_list_unit {
    peer p;                 /// Структура с получеными данныи об узле
    int id;                 /// Номер узла равен номеру в массиве узлов
    char status;            /// Статус узла: 0 - потенциальный, 1 - живой
    unsigned short time;    /// Время последной модификации/добавления узла
}peer_list_unit;

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с массивом узлов */
/* ----------------------------------------------------------------------------------------------- */
typedef struct peer_list_str {
    peer_list_unit *peer_l; /// Массив с данными об узлах
    int capacity;           /// Размер массива
    int num_live_peers;     /// Количество "живых" узлов
    int timeout;            /// Время жизни улов
    int pl_is_busy;         /// Флаг, свидетельствующий о том, что массив обрабатывается ф-ией
    int pl_is_changed;      /// Флаг, свидетельствующий о том, что массив изменен
} peer_list_str;

/* ----------------------------------------------------------------------------------------------- */
/*! Очистка структуры

    @param peer_l - массив информации об узлах

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_destruct(peer_list_str *peer_l);

/* ----------------------------------------------------------------------------------------------- */
/*! Инициализация структуры

    @param peer_l   - массив информации об узлах
    @param timeout  - время жизни узлов

    @return указатель на структуру
*/
/* ----------------------------------------------------------------------------------------------- */
peer_list_str *mka_pls_init(peer_list_str *peer_l, int timeout);

/* ----------------------------------------------------------------------------------------------- */
/*! Заполнение структуры с полученной информацией об узле

    @param peer         - информация об узлах
    @param peer_id      - номер узла
    @param KS_priority  - приоритет узла

    @return указатель на структуру
*/
/* ----------------------------------------------------------------------------------------------- */
peer *mka_pls_peer_init(peer *peer, int peer_id, int KS_priority);

/* ----------------------------------------------------------------------------------------------- */
/*! Добавление узла в массив узлов

    @param peer_l   - массив информации об узлах
    @param p        - структура с полученными данными об узле

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_peer_add(peer_list_str *peer_l, peer *p);

/* ----------------------------------------------------------------------------------------------- */
/*! Добавление узла в массив узлов с указанием времени и статуса

    @param peer_l   - массив информации об узлах
    @param p        - структура с полученными данными об узле
    @param time     - время последней акивности узла
    @param status   - статус узла

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_peer_add_with_time_and_status(peer_list_str *peer_l, peer *p, unsigned short time, int status);

/* ----------------------------------------------------------------------------------------------- */
/*! Обновление статуса узла по его номеру в массиве

    @param peer_l   - массив информации об узлах
    @param id       - номер узла в массиве
    @param status   - статус узла

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_peer_upd_status_by_id(peer_list_str *peer_l, int id, char status);

/* ----------------------------------------------------------------------------------------------- */
/*! Одновление времени последней активности узла по его номеу в массиве

    @param peer_l   - массив информации об узлах
    @param id       - номер узла в массиве
    @param time     - время последней акивности узла

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_peer_upd_time_by_id(peer_list_str *peer_l, int id, unsigned short time);

/* ----------------------------------------------------------------------------------------------- */
/*! Удаление узла по его номеру в массиве

    @param peer_l   - массив информации об узлах
    @param id       - номер в массиве узлов

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_peer_dlt_by_id(peer_list_str *peer_l, int id);

/* ----------------------------------------------------------------------------------------------- */
/*! Удаление всех "умерших" узлов из массива узлов

    @param peer_l - массив информации об узлах

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_dlt_died_peers(peer_list_str *peer_l);

/* ----------------------------------------------------------------------------------------------- */
/*! Проверка есть ли в массиве узлов "умершие" узлы

    @param peer_l - массив информации об узлах

    @return 0 - нет "умерших" узлов, 1 - есть
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_pls_check_for_died_peers(peer_list_str *peer_l);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение порядкового номера в массиве по номеру узла

    @param peer_l  - массив информации об узлах
    @param peer_id - номер узла

    @return порядковый номер в массиве, -1, если его нет
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_pls_peer_get_id_by_peer_id(peer_list_str *peer_l, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение порядкового номера в массиве по номеру узла без контроля доступа к массиву

    @param peer_l  - массив информации об узлах
    @param peer_id - номер узла

    @return порядковый номер в массиве, -1, если его нет
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_pls_peer_get_id_by_peer_id_wthout_access_control(peer_list_str *peer_l, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение наибольшего приоритета КС среди всех "живых" узлов

    @param peer_l   - массив информации об узлах
    @param imKS     - указатель на переменную флаг
    @param my_ks_pr - приоритет текущего узла
    @param my_id    - номер текущего узла

    @return наибольший приоритет КС среди всех "живых" узлов
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_pls_get_highest_ks_priority(peer_list_str *peer_l, int *imKS, int my_ks_pr, int my_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение статуса узла по его номеру

    @param peer_l  - массив информации об узлах
    @param peer_id - номер узла

    @return статус узла, -1, если узла нет в массиве
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_pls_peer_get_status_by_peer_id(peer_list_str *peer_l, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Создает строку, состоящую из номеров, приоритета и времени живых узлов

    @param peer_l   - массив информации об узлах
    @param len      - длина выходной строки

    @return строка, состоящая из номеров, приоритета и времени живых узлов, null, если нет живых узлов
*/
/* ----------------------------------------------------------------------------------------------- */
char *mka_pls_get_live_peers_with_peer_id_pr_t(peer_list_str *peer_l, int *len);

/* ----------------------------------------------------------------------------------------------- */
/*! Печать информации об узле

    @param p - информация об узле

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_peer_print(peer *p);

/* ----------------------------------------------------------------------------------------------- */
/*! Ф-ия, передаваемая в поток очистки массива узлов от "умершх" узлов

    @param args - структура с общими параметрами

*/
/* ----------------------------------------------------------------------------------------------- */
void *mka_pls_cleaner_thread_func(void *args);

/* ----------------------------------------------------------------------------------------------- */
/*! Обновление массива узлов по строке, содержащей номер, приоритет и время живых узлов

    @param peers_id_pr_t    - строка с данными
    @param len              - длина строки
    @param peer_l           - массив информации об узлах
    @param my_id            - номер текущего узла

    @return 0 - массив не изменился, 1 - изменился
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_pls_upd_peer_list_by_peers_id_pr_t(char *peers_id_pr_t, int len, peer_list_str *peer_l, int my_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Создает строку, состоящую из номеров живых узлов

    @param peer_l   - массив информации об узлах
    @param len      - длина выходной строки

    @return строка, состоящая из номеров живых узлов, null, если нет живых узлов
*/
/* ----------------------------------------------------------------------------------------------- */
char *mka_pls_get_live_peers_with_peer_id(peer_list_str *peer_l, int *len);

/* ----------------------------------------------------------------------------------------------- */
/*! Разблокирование массива с информацией об узлах

    @param peer_l   - массив информации об узлах
    @param type     - тип блокировки (0 - на изменение, 1 - на чтение)

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_unfreeze(peer_list_str *peer_l, int type);

/* ----------------------------------------------------------------------------------------------- */
/*! Блокировка массива с информацией об узлах

    @param peer_l   - массив информации об узлах
    @param type     - тип блокировки (0 - на изменение, 1 - на чтение)
*/
/* ----------------------------------------------------------------------------------------------- */
void mka_pls_freeze(peer_list_str *peer_l, int type);

#endif //DIPLOMA_PEER_LIST_STR_H
