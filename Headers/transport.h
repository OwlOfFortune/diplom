#ifndef DIPLOMA_TRANSPORT_H
#define DIPLOMA_TRANSPORT_H

#include <sys/socket.h>
#include <memory.h>
#include <sys/ioctl.h>
#include <net/if.h>
#include <netinet/in.h>
#include <netinet/ether.h>
#include "stdlib.h"
#include "string.h"
#include <linux/if_packet.h>
#include <stdio.h>
#include <time.h>
#include <unistd.h>
#include "pthread.h"

#define MKA_PROTO 0x9999
// todo: MTU size
#define MTU_SIZE 1200

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с данными о соединении */
/* ----------------------------------------------------------------------------------------------- */
typedef struct connection{
    int peer_id;                            /// Номер узла, с которым общается данный интерфейс
    unsigned char dest_mac[6];              /// MAC адрес получателя
    int HT_pause;                           /// Флаг, показывающий, что надо поставить посылку HT на паузу (для этого соединения)
} connection;

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с данными о интерфейсе */
/* ----------------------------------------------------------------------------------------------- */
typedef struct connection_params{
    int sockfd;                             /// Дескриптор сокета
    struct sockaddr_ll socket_address;      /// Структура с данными о сокете
    char *interface;                        /// Название интерфейса
    int interface_num;                      /// Номер интерфейса в массиве данных о соединениях
    int interface_len;                      /// Длина названия интерфейса
    connection *potential_connection_list;  /// Массив потенциальных подключений
    connection *alive_connection_list;      /// Массив действующих подключений
    int pcl_capacity, acl_capacity;         /// Размер массива подключений
    int pcl_is_busy, acl_is_busy;           /// Флаг, показывающий, что массив обрабатывается процессом
    unsigned char src_mac[6];               /// MAC адрес отправителя (текущего узла)
    pthread_t tid_recv;                     /// Дескриптор потока, слущающего этот интерфейс
    int stop;                               /// Флаг для останвки потока
} connection_params;

/* ----------------------------------------------------------------------------------------------- */
/*! Структура с массивом данных о соединениях */
/* ----------------------------------------------------------------------------------------------- */
typedef struct connection_params_list{
    connection_params *c_p_list;            /// Массив с данными о соединениях
    int num_of_c_p;                         /// Количество соединений
} connection_params_list;

/* ----------------------------------------------------------------------------------------------- */
/*! Завершение всех соединений

    @param connectionParamsList - структура с данными о соединениях

    @return 0 - успех
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cpl_destruct(connection_params_list *connectionParamsList);

/* ----------------------------------------------------------------------------------------------- */
/*! Добавление соединения в структуру

    @param connectionParamsList - структура с данными о соединениях
    @param connectionParams     - структура с данными об одном соединении

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_cpl_add_connection_param_in_list(connection_params_list *connectionParamsList, connection_params *connectionParams);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение MAC адреса интерфейса

    @param if_mac               - структура, кудет складываться MAC
    @param connectionParams     - структура с данными об одном соединении

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_get_interface_MAC(struct ifreq *if_mac, connection_params *connectionParams);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение ндекса интерфейса

    @param if_idx               - структура, кудет складываться индекс
    @param connectionParams     - структура с данными об одном соединении

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_get_interface_index(struct ifreq *if_idx, connection_params *connectionParams);

/* ----------------------------------------------------------------------------------------------- */
/*! Создание сокета

    @param connectionParams - структура с данными об одном соединении

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_create_socket(connection_params *connectionParams);

/* ----------------------------------------------------------------------------------------------- */
/*! Отправление данных

    @param connectionParams     - структура с данными об одном соединении
    @param data                 - указатель на строку данных
    @param data_len             - длина строки
    @param peer_id              - идентификатор абонента получателя

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_cp_send_data(connection_params *connectionParams, char *data, int data_len, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение данных в течении sec_timeout секунд

    @param connectionParams     - структура с данными об одном соединении
    @param recieved_buf_len     - указатель на переменную, куда добавится длина полученной строки
    @param sec_timeout          - количество секунд на ожидание сообщения

    @return указатель на полученную строку или null, если не получил
*/
/* ----------------------------------------------------------------------------------------------- */
char *mka_cp_recieve_data_sec(connection_params *connectionParams, int *recieved_buf_len, time_t sec_timeout);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение данных

    @param connectionParams     - структура с данными об одном соединении
    @param recieved_buf_len     - указатель на переменную, куда добавится длина полученной строки

    @return указатель на полученную строку или null, если не получил
*/
/* ----------------------------------------------------------------------------------------------- */
char *mka_cp_recieve_data(connection_params *connectionParams, int *recieved_buf_len);

/* ----------------------------------------------------------------------------------------------- */
/*! Инициализация структуры с подключением (создает сокет и заполняет данные)

    @param c_p                  - структура с данными об одном соединении
    @param interface            - название интерфейса
    @param interface_len        - длина названия интерфейса
    @param dest_mac             - адрес получателя

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_init(connection_params *c_p, char *interface, int interface_len, unsigned char *dest_mac);

/* ----------------------------------------------------------------------------------------------- */
/*! Инициализвация массива подключений

    @param connectionParamsList - структура с данными о соединениях

    @return 0 - успех
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cpl_init(connection_params_list *connectionParamsList);

/* ----------------------------------------------------------------------------------------------- */
/*! Обновление номера узла подключения по порядковому номеру подключения в массиве

    @param connectionParamsList - структура с данными о соединениях
    @param peer_id              - номер узла
    @param dest_mac             - MAC адресс абонента

    @return 0 - успех, 1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_add_potential_connection(connection_params *connectionParams, int peer_id,
                                    unsigned char *dest_mac);

/* ----------------------------------------------------------------------------------------------- */
/*! Блокирование массива соединений

    @param connectionParams - структура с данными о соединениях
    @param type             - тип блокировки (0 - на запись, 1 - на чтение)
    @param list_type        - тип списка подключений (0 - потенциальный, 1 - живой)

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_cp_freeze(connection_params *connectionParams, int type, int list_type);

/* ----------------------------------------------------------------------------------------------- */
/*! Разблокирование массива соединений

    @param connectionParams - структура с данными о соединениях
    @param type             - тип блокировки (0 - на запись, 1 - на чтение)
    @param list_type        - тип списка подключений (0 - потенциальный, 1 - живой)

*/
/* ----------------------------------------------------------------------------------------------- */
void mka_cp_unfreeze(connection_params *connectionParams, int type, int list_type);

/* ----------------------------------------------------------------------------------------------- */
/*! Изменение статуса подключения

    @param connectionParams - структура с данными о соединениях
    @param peer_id          - идентификатор абонента

    @return 0 - успех, -1 - ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_make_potential_connection_alive_by_peer_id(connection_params *connectionParams, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Получить порядковый номер абонента по его номеру и данным о соединениях

    @param connectionParams - структура с данными о соединениях
    @param peer_id          - идентификатор абонента
    @param type             - тип списка подключений (0 - потенциальный, 1 - живой, -1 - искать во всех)

    @return
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_get_connection_num_by_peer_id(connection_params *connectionParams, int peer_id, int type);

/* ----------------------------------------------------------------------------------------------- */
/*! Получение MAC адреса абонента по его номеру и данным о соединениях

    @param connectionParams - структура с данными о соединениях
    @param peer_id          - идентификатор абонента

    @return указатель на адрес или NULL, если такого нет
*/
/* ----------------------------------------------------------------------------------------------- */
unsigned char *mka_cp_get_dest_mac_by_peer_id(connection_params *connectionParams, int peer_id);

/* ----------------------------------------------------------------------------------------------- */
/*! Удаление соединения из списка потенциальных или живых соединений по его номеру

    @param connectionParams - структура с данными о соединениях
    @param peer_id          - идентификатор абонента
    @param list_type        - тип списка подключений (0 - потенциальный, 1 - живой)

    @return 0 - успех
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_rm_connection_by_peer_id(connection_params *connectionParams, int peer_id, int list_type);

/* ----------------------------------------------------------------------------------------------- */
/*! Получить порядковый номер соединения по идентификатору абонента

    @param connectionParams - структура с данными о соединениях
    @param peer_id          - идентификатор абонента

    @return номер абонента или -1, если ошибка
*/
/* ----------------------------------------------------------------------------------------------- */
int mka_cp_get_potential_connection_num_by_peer_id(connection_params *connectionParams, int peer_id);

#endif //DIPLOMA_TRANSPORT_H
